# : << 'EOF'

#____________________________________________________________________________________________________________________________________________________________________________________________________#
#____________________________________________________________________________________________________________________________________________________________________________________________________#

%if #{==:#{TMUX_PROGRAM},}
  run 'TMUX_PROGRAM="$(LSOF=$(PATH="$PATH:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin" command -v lsof); $LSOF -b -w -a -d txt -p #{pid} -Fn 2>/dev/null | perl -n -e "if (s/^n((?:.(?!dylib$|so$))+)$/\1/g && s/(?:\s+\([^\s]+?\))?$//g) { print; exit } } exit 1; {" || readlink "/proc/#{pid}/exe" 2>/dev/null)"; {[ -f "$TMUX_PROGRAM" ] && [ -x "$TMUX_PROGRAM" ]} || TMUX_PROGRAM="$(command -v tmux || printf tmux)"; "$TMUX_PROGRAM" -S #{socket_path} set-environment -g TMUX_PROGRAM "$TMUX_PROGRAM"'
%endif
%if #{==:#{TMUX_SOCKET},}
  run '"$TMUX_PROGRAM" -S #{socket_path} set-environment -g TMUX_SOCKET "#{socket_path}"'
%endif
%if #{==:#{TMUX_CONF},}
  run '"$TMUX_PROGRAM" set-environment -g TMUX_CONF $(for conf in "$HOME/.tmux.conf" "$XDG_CONFIG_HOME/tmux/tmux.conf" "$HOME/.config/tmux/tmux.conf"; do [ -f "$conf" ] && printf "%s" "$conf" && break; done)'
%endif

# reload configuration
bind r run '"$TMUX_PROGRAM" ${TMUX_SOCKET:+-S "$TMUX_SOCKET"} source "$TMUX_CONF"' \; display "#{TMUX_CONF} sourced"

#____________________________________________________________________________________________________________________________________________________________________________________________________#
#____________________________________________________________________________________________________________________________________________________________________________________________________#

#_______________________________________________               _____________________________________________
#_______________________________________________GENERAL OPTIONS_____________________________________________


set -g default-terminal "xterm-256color"

set -g mouse on

# Start counting windows with 1.
set -g base-index 1
setw -g pane-base-index 1

set -g renumber-windows on    # renumber windows
setw -g automatic-rename on   # rename window to current program
set-option -g allow-rename on
set-option -g focus-events on
set -g set-titles on          # set terminal title

setw -g xterm-keys on
set -s escape-time 0                     # faster command sequences
#set -sg repeat-time 600                   # increase repeat timeout

set -q -g status-utf8 on                  # expect UTF-8 (tmux < 2.2)
setw -q -g utf8 on

set -g history-limit 5000                 # boost history

set -s set-clipboard on
#______________________________________________                   __________________________________________
#______________________________________________END GENERAL OPTIONS__________________________________________


#______________________________________________        _____________________________________________________
#______________________________________________BINDINGS_____________________________________________________

bind-key -n Home send Escape "OH"
bind-key -n End send Escape "OF"

# remap prefix from 'C-b' to 'C-a'
unbind C-b
set-option -g prefix C-a
bind-key C-a send-prefix

# split panes using | and _
bind | split-window -h
bind _ split-window -v
unbind '"'
unbind %

# switch panes using Alt-arrow without prefix
bind -n M-Left select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up select-pane -U
bind -n M-Down select-pane -D

# Switch windows using Ctrl+Alt+arrow without prefix
bind -n C-M-Right select-window -n
bind -n C-M-Left select-window -p

# copy mode
bind C-c copy-mode # enter copy mode

#______________________________________________            _________________________________________________
#______________________________________________END BINDINGS_________________________________________________


#________________________________________________     ______________________________________________________
#________________________________________________HOOKS______________________________________________________

#set-hook -g -w pane-focus-in "set-option -Fw pane-border-status '#{?#{e|>:#{window_panes},1},top,off}'"

#______________________________________________         ____________________________________________________
#______________________________________________END HOOKS____________________________________________________

#______________________________________________           __________________________________________________
#______________________________________________NORD COLORS__________________________________________________
nord0='#2E3440'
nord1='#3b4252'
nord2='#434c5e'
nord3='#4c566a'
nord4='#d8dee9'
nord5='#e5e9f0'
nord6='#eceff4'
nord7='#8fbcbb'
nord8='#88c0d0'
nord9='#81a1c1'
nord10='#5e81ac'
nord11='#bf616a'
nord12='#d08770'
nord13='#ebcb8b'
nord14='#a3be8c'
nord15='#b48ead'

set -g @text_dark $nord0
set -g @text_white $nord6

set -g @session_icon_fg $nord8

set -g @active_tab_bg_1 $nord14

set -g @inactive_tab_bg_1 $nord1

set -g @user_icon_fg $nord8

set -g @active_pane_border $nord14
set -g @inactive_pane_border $nord1
#____________________________________________               ________________________________________________
#____________________________________________END NORD COLORS________________________________________________


#________________________________________________     ______________________________________________________
#________________________________________________STYLE______________________________________________________

set-option -g status-position top

set-option -g status-style bg=default
set-option -g status-style '#[fg=#{@text_white}]'

set -g status-right-length 0
set -g status-right '#[fg=#{@user_icon_fg}]  #(cut -c3- $TMUX_CONF | sh -s _username ) | #(cut -c3- $TMUX_CONF | sh -s _hostname )'


set -g status-left-length 0
set -g status-left '#[bg=default,fg=#{@session_icon_fg}] 󰞷 #[bg=default,fg=#{@text_white}] #S  '

set -g window-status-current-format '#[bg=default,fg=#{@active_tab_bg_1}]#[bg=#{@active_tab_bg_1},fg=#{@text_dark}]#I#[bg=default, fg=#{@active_tab_bg_1}] #[fg=default]#W#{?window_flags,#{window_flags}, }'

set -g window-status-format '#[bg=default, fg=#{@inactive_tab_bg_1}]#[bg=#{@inactive_tab_bg_1},fg=#{@text_dark}]#I#[bg=default, fg=#{@inactive_tab_bg_1}] #W#{?window_flags,#{window_flags}, }'

set -g pane-active-border-style '#{?pane_in_mode,fg=yellow,#{?synchronize-panes,fg=red,fg=#{@active_pane_border}}}'
set -g pane-border-style 'fg=#{@inactive_pane_border}' 
#______________________________________________         ____________________________________________________
#______________________________________________END STYLE____________________________________________________


# EOF
#
# # exit the script if any statement returns a non-true return value
# set -e
#
# _username() {
#   pane_tty=$($TMUX_PROGRAM display-message -p "#{pane_tty}")
#   pane_command=$(echo $(_get_full_command) | awk '{print $1;}')
#   username=$(whoami)
#
#   if [ "$pane_command" = "ssh" ]; then 
#     ssh_host=$(ps -t $pane_tty -o command= | tail -1 | awk 'NF{print $NF; exit}')
#     username=$(ssh -G $ssh_host 2>/dev/null | awk '/^user / { print $2; exit }') 
#   fi
#
#   printf "%s\n" "$username"
# }
#
# _hostname() {
#   pane_tty=$($TMUX_PROGRAM display-message -p "#{pane_tty}")
#   pane_command=$(echo $(_get_full_command) | awk '{print $1;}')
#
#   hostname=#H
#
#   if [ "$pane_command" = "ssh" ]; then 
#     ssh_host=$(ps -t $pane_tty -o command= | tail -1 | awk 'NF{print $NF; exit}')
#     hostname=$(ssh -G $ssh_host 2>/dev/null | awk '/^hostname / { print $2; exit }')
#     hostname=${hostname%%.*}  
#   fi
#
#   printf "%s\n" "$hostname"
# }
#
# _get_full_command() {
#   pane_tty=$($TMUX_PROGRAM display-message -p "#{pane_tty}")
#   pane_full_command=$(ps -t $pane_tty -o command=| tail -1)
#
#   printf "%s\n" "$pane_full_command"
# }
#
# "$@"
